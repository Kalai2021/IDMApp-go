openapi: 3.0.3
info:
  title: IDM App API
  description: |
    Identity and Access Management (IDM) Application API
    
    This API provides comprehensive user, group, organization, and role management capabilities
    with Auth0 integration for secure authentication and authorization.
    
    ## Features
    - User Management (CRUD operations)
    - Group Management (CRUD operations)
    - Organization Management (CRUD operations)
    - Role Management (CRUD operations)
    - Group Member Management (User-Group relationships)
    - Organization Member Management (User/Group/Role-Organization relationships)
    - Role Member Management (User/Group-Role relationships)
    - Auth0 JWT Authentication
    - Health Monitoring
    
    ## Authentication
    All protected endpoints require a valid JWT token from Auth0. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Getting Started
    1. Configure your Auth0 credentials in the `.env` file
    2. Obtain a JWT token using the Auth0 client credentials flow
    3. Use the token to access protected endpoints
    
    ## Note on Missing Endpoints
    The following endpoints exist in the codebase but are not currently wired up in the routes:
    - Organization Member Management (`/api/v1/orgmembers`) - Add/remove users, groups, or roles from organizations
    - Role Member Management (`/api/v1/rolemembers`) - Add/remove users or groups from roles
    
    These endpoints can be enabled by adding the appropriate route configurations in `routes/routes.go`.
    
  version: 1.0.0
  contact:
    name: IDM App Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.example.com
    description: Production server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the application is running and healthy
      operationId: healthCheck
      responses:
        '200':
          description: Application is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  message:
                    type: string
                    example: "IDM App is running"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-06-22T14:00:00Z"

  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user with email and password
      operationId: userLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
                password:
                  type: string
                  format: password
                  description: User's password
                  example: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users in the system
      operationId: getAllUsers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user in the system
      operationId: createUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - User with this email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update user
      description: Update an existing user's information
      operationId: updateUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user from the system
      operationId: deleteUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/groups:
    get:
      tags:
        - Groups
      summary: Get all groups
      description: Retrieve a list of all groups in the system
      operationId: getAllGroups
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of groups retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Groups
      summary: Create a new group
      description: Create a new group in the system
      operationId: createGroup
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreateRequest'
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Group with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/groups/{id}:
    get:
      tags:
        - Groups
      summary: Get group by ID
      description: Retrieve a specific group by its ID
      operationId: getGroupById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Group ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Group retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Groups
      summary: Update group
      description: Update an existing group's information
      operationId: updateGroup
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Group ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdateRequest'
      responses:
        '200':
          description: Group updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Group name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Groups
      summary: Delete group
      description: Delete a group from the system
      operationId: deleteGroup
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Group ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Group deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Group deleted successfully"
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/orgs:
    get:
      tags:
        - Organizations
      summary: Get all organizations
      description: Retrieve a list of all organizations in the system
      operationId: getAllOrgs
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of organizations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrgResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Organizations
      summary: Create a new organization
      description: Create a new organization in the system
      operationId: createOrg
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgCreateRequest'
      responses:
        '201':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgResponse'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Organization with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/orgs/{id}:
    get:
      tags:
        - Organizations
      summary: Get organization by ID
      description: Retrieve a specific organization by its ID
      operationId: getOrgById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Organization ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Organization retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Organizations
      summary: Update organization
      description: Update an existing organization's information
      operationId: updateOrg
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Organization ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUpdateRequest'
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgResponse'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Organization name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Organizations
      summary: Delete organization
      description: Delete an organization from the system
      operationId: deleteOrg
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Organization ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Organization deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Organization deleted successfully"
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/roles:
    get:
      tags:
        - Roles
      summary: Get all roles
      description: Retrieve a list of all roles in the system
      operationId: getAllRoles
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Roles
      summary: Create a new role
      description: Create a new role in the system
      operationId: createRole
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreateRequest'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Role with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/roles/{id}:
    get:
      tags:
        - Roles
      summary: Get role by ID
      description: Retrieve a specific role by its ID
      operationId: getRoleById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Role ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Role retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Roles
      summary: Update role
      description: Update an existing role's information
      operationId: updateRole
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Role ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdateRequest'
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Role name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Roles
      summary: Delete role
      description: Delete a role from the system
      operationId: deleteRole
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Role ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Role deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Role deleted successfully"
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/groupmembers:
    get:
      tags:
        - Group Members
      summary: Get all group members
      description: Retrieve a list of all group memberships in the system
      operationId: getAllGroupMembers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of group members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Group Members
      summary: Add or remove group member
      description: Add a user to a group or remove a user from a group
      operationId: manageGroupMember
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberOpRequest'
      responses:
        '201':
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResponse'
        '204':
          description: Member removed successfully
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Member already exists in group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/groupmembers/group/{groupId}:
    get:
      tags:
        - Group Members
      summary: Get members by group ID
      description: Retrieve all members of a specific group
      operationId: getMembersByGroupId
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          description: Group ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Group members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberResponse'
        '400':
          description: Bad request - Invalid group ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/groupmembers/user/{userId}:
    get:
      tags:
        - Group Members
      summary: Get memberships by user ID
      description: Retrieve all group memberships for a specific user
      operationId: getMembersByUserId
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User memberships retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberResponse'
        '400':
          description: Bad request - Invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/orgmembers:
    get:
      tags:
        - Organization Members
      summary: Get all organization members
      description: Retrieve a list of all organization memberships in the system
      operationId: getAllOrgMembers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of organization members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrgMemberResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Organization Members
      summary: Manage organization members
      description: Add or remove users, groups, or roles from an organization
      operationId: manageOrgMember
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgMemberOpRequest'
      responses:
        '200':
          description: Organization member added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgMemberResponse'
        '204':
          description: Organization member removed successfully
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Organization member not found (for removal)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/orgmembers/org/{orgId}:
    get:
      tags:
        - Organization Members
      summary: Get organization members by organization ID
      description: Retrieve all members of a specific organization
      operationId: getOrgMembersByOrgId
      security:
        - BearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          description: Organization ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Organization members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrgMemberResponse'
        '400':
          description: Bad request - Invalid organization ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/rolemembers:
    get:
      tags:
        - Role Members
      summary: Get all role members
      description: Retrieve a list of all role memberships in the system
      operationId: getAllRoleMembers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of role members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleMemberResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Role Members
      summary: Manage role members
      description: Add or remove users or groups from a role
      operationId: manageRoleMember
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleMemberOpRequest'
      responses:
        '200':
          description: Role member added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleMemberResponse'
        '204':
          description: Role member removed successfully
        '400':
          description: Bad request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role member not found (for removal)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/rolemembers/role/{roleId}:
    get:
      tags:
        - Role Members
      summary: Get role members by role ID
      description: Retrieve all members of a specific role
      operationId: getRoleMembersByRoleId
      security:
        - BearerAuth: []
      parameters:
        - name: roleId
          in: path
          required: true
          description: Role ID (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Role members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleMemberResponse'
        '400':
          description: Bad request - Invalid role ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/rolemembers/entity/{entityId}:
    get:
      tags:
        - Role Members
      summary: Get role memberships by entity ID
      description: Retrieve all role memberships for a specific user or group
      operationId: getRoleMembersByEntityId
      security:
        - BearerAuth: []
      parameters:
        - name: entityId
          in: path
          required: true
          description: Entity ID (User or Group ID) (UUID)
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Role memberships retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleMemberResponse'
        '400':
          description: Bad request - Invalid entity ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from Auth0. Include the token in the Authorization header.
        Example: `Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...`

  schemas:
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/UserResponse'
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 3600

    UserCreateRequest:
      type: object
      required:
        - name
        - firstName
        - lastName
        - email
        - password
      properties:
        name:
          type: string
          description: Unique username
          example: "john_doe"
        firstName:
          type: string
          description: User's first name
          example: "John"
        lastName:
          type: string
          description: User's last name
          example: "Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          description: User's password (min 8 characters)
          example: "securepassword123"
        isActive:
          type: boolean
          description: Whether the user is active
          default: true

    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Unique username
          example: "john_doe_updated"
        firstName:
          type: string
          description: User's first name
          example: "John"
        lastName:
          type: string
          description: User's last name
          example: "Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        isActive:
          type: boolean
          description: Whether the user is active
          example: true

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Username
          example: "john_doe"
        firstName:
          type: string
          description: First name
          example: "John"
        lastName:
          type: string
          description: Last name
          example: "Doe"
        email:
          type: string
          format: email
          description: Email address
          example: "john.doe@example.com"
        isActive:
          type: boolean
          description: Active status
          example: true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-06-22T14:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-06-22T14:00:00Z"

    GroupCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Unique group name
          example: "developers"
        displayName:
          type: string
          description: Display name for the group
          example: "Development Team"
        description:
          type: string
          description: Group description
          example: "Software development team"

    GroupUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Unique group name
          example: "senior-developers"
        displayName:
          type: string
          description: Display name for the group
          example: "Senior Development Team"
        description:
          type: string
          description: Group description
          example: "Senior software development team"
        isActive:
          type: boolean
          description: Whether the group is active
          example: true

    GroupResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Group ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Group name
          example: "developers"
        displayName:
          type: string
          description: Display name
          example: "Development Team"
        description:
          type: string
          description: Group description
          example: "Software development team"
        isActive:
          type: boolean
          description: Active status
          example: true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-06-22T14:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-06-22T14:00:00Z"

    OrgCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Unique organization name
          example: "acme-corp"
        displayName:
          type: string
          description: Display name for the organization
          example: "ACME Corporation"
        description:
          type: string
          description: Organization description
          example: "A leading technology company"

    OrgUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Unique organization name
          example: "acme-enterprise"
        displayName:
          type: string
          description: Display name for the organization
          example: "ACME Enterprise Solutions"
        description:
          type: string
          description: Organization description
          example: "Enterprise technology solutions provider"
        isActive:
          type: boolean
          description: Whether the organization is active
          example: true

    OrgResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Organization ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Organization name
          example: "acme-corp"
        displayName:
          type: string
          description: Display name
          example: "ACME Corporation"
        description:
          type: string
          description: Organization description
          example: "A leading technology company"
        isActive:
          type: boolean
          description: Active status
          example: true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-06-22T14:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-06-22T14:00:00Z"

    RoleCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Unique role name
          example: "admin"
        displayName:
          type: string
          description: Display name for the role
          example: "Administrator"
        description:
          type: string
          description: Role description
          example: "System administrator role"

    RoleUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Unique role name
          example: "super-admin"
        displayName:
          type: string
          description: Display name for the role
          example: "Super Administrator"
        description:
          type: string
          description: Role description
          example: "Super administrator role with full access"
        isActive:
          type: boolean
          description: Whether the role is active
          example: true

    RoleResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Role ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Role name
          example: "admin"
        displayName:
          type: string
          description: Display name
          example: "Administrator"
        description:
          type: string
          description: Role description
          example: "System administrator role"
        isActive:
          type: boolean
          description: Active status
          example: true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-06-22T14:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-06-22T14:00:00Z"

    MemberOpRequest:
      type: object
      required:
        - op
        - groupId
        - userId
      properties:
        op:
          type: string
          description: Operation type
          enum: ["ADD", "REMOVE"]
          example: "ADD"
        groupId:
          type: string
          format: uuid
          description: Group ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        userId:
          type: string
          format: uuid
          description: User ID
          example: "123e4567-e89b-12d3-a456-426614174000"

    MemberResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Member ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        groupId:
          type: string
          format: uuid
          description: Group ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        userId:
          type: string
          format: uuid
          description: User ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-06-22T14:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-06-22T14:00:00Z"

    OrgMemberOpRequest:
      type: object
      required:
        - op
        - type
        - orgId
        - entityId
      properties:
        op:
          type: integer
          description: Operation code (1 for ADD, 2 for REMOVE)
          enum: [1, 2]
          example: 1
        type:
          type: string
          description: Entity type (USER, GROUP, or ROLE)
          enum: ["USER", "GROUP", "ROLE"]
          example: "USER"
        orgId:
          type: string
          format: uuid
          description: Organization ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        entityId:
          type: string
          format: uuid
          description: Entity ID (User, Group, or Role ID)
          example: "123e4567-e89b-12d3-a456-426614174000"

    OrgMemberResponse:
      type: object
      properties:
        orgId:
          type: string
          format: uuid
          description: Organization ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        entityId:
          type: string
          format: uuid
          description: Entity ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        type:
          type: string
          description: Entity type
          example: "USER"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-06-22T14:00:00Z"

    RoleMemberOpRequest:
      type: object
      required:
        - op
        - type
        - roleId
        - entityId
      properties:
        op:
          type: integer
          description: Operation code (1 for ADD, 2 for REMOVE)
          enum: [1, 2]
          example: 1
        type:
          type: string
          description: Entity type (USER or GROUP)
          enum: ["USER", "GROUP"]
          example: "USER"
        roleId:
          type: string
          format: uuid
          description: Role ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        entityId:
          type: string
          format: uuid
          description: Entity ID (User or Group ID)
          example: "123e4567-e89b-12d3-a456-426614174000"

    RoleMemberResponse:
      type: object
      properties:
        roleId:
          type: string
          format: uuid
          description: Role ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        entityId:
          type: string
          format: uuid
          description: Entity ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        type:
          type: string
          description: Entity type
          example: "USER"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-06-22T14:00:00Z"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "User not found"
        code:
          type: string
          description: Error code
          example: "USER_NOT_FOUND"
        details:
          type: object
          description: Additional error details
          additionalProperties: true

tags:
  - name: Authentication
    description: User authentication operations
  - name: Users
    description: User management operations
  - name: Groups
    description: Group management operations
  - name: Group Members
    description: User-Group membership management operations
  - name: Organizations
    description: Organization management operations
  - name: Organization Members
    description: Organization membership management operations
  - name: Roles
    description: Role management operations
  - name: Role Members
    description: Role membership management operations
  - name: Health
    description: Health check operations 